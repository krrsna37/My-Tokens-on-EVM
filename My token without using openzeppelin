// SPDX-License-Identifier: GPL-3.0
pragma solidity >=0.8.0;

//Token name is KGF Token
contract KGFTokenERC20 {

//declaring events transfer and approval
    event Transfer(address indexed from, address indexed to, uint tokens);
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);

//declaring name, symbol and decimal of the token
    string public constant name = "KGF Token";
    string public constant symbol = "KGF";
    uint8 public constant decimals = 18;

// mapping is used to assign balances into account and its value ehich is uint256
/* address is 160-bit value that does not support any arithmethic operation
 but used to store contract addresses or a hash of the public half of a key pair that belongs to external accounts.*/
    mapping(address => uint256) balances;

    mapping(address => mapping (address => uint256)) allowed;

// Number of tokens accessible in our contract
    uint256 totalSupply_;

// When contract is deployed we use constructor and 
// the deploying address's balance is equal to the total tokens stored in msg.sender
    constructor(uint256 total) {
      totalSupply_ = total;
      balances[msg.sender] = totalSupply_;
    }

    function totalSupply() public view returns (uint256) {
      return totalSupply_;
    }

// Acquiring balance of the owner, tokenowner is the argument where balances are retrieved
    function balanceOf(address tokenOwner) public view returns (uint) {
        return balances[tokenOwner];
    }

//Transfering token to the desired account
    function transfer(address receiver, uint numTokens) public returns (bool) {    
        require(numTokens <= balances[msg.sender]);
        balances[msg.sender] -= numTokens;
        balances[receiver] += numTokens;
        emit Transfer(msg.sender, receiver, numTokens);
        return true;
    }

// Now using a approve method to sanctioned a token transfer
    function approve(address delegate, uint numTokens) public returns (bool) {
        allowed[msg.sender][delegate] = numTokens;
        emit Approval(msg.sender, delegate, numTokens);
        return true;
    }

// USing the allowance method to accquire the allowance status of desired account
    function allowance(address owner, address delegate) public view returns (uint) {
        return allowed[owner][delegate];
    }

// Tranfering token from the accoount of owner to buyer
    function transferFrom(address owner, address buyer, uint numTokens) public returns (bool) {
        // verifying whether the owner has sufficient token and authorized to transfer in the method body
        require(numTokens <= balances[owner]);
        require(numTokens <= allowed[owner][msg.sender]);
        balances[owner] -= numTokens;
        allowed[owner][msg.sender] -= numTokens;
        // owner is credited with the number of token send
        balances[buyer] += numTokens;
        emit Transfer(owner, buyer, numTokens);
        return true;
    }
}
